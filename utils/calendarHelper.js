// calendarHelper.js

/**
 * ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å calendar ‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô yyyyMMdd (‡∏õ‡∏µ ‡∏Ñ.‡∏®.)
 * @param {import('@playwright/test').Page} page - Playwright page
 * @param {string} yyyymmdd - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö yyyyMMdd ‡πÄ‡∏ä‡πà‡∏ô "20251203"
 * @param {import('@playwright/test').Locator|string} dateInputSelector - selector ‡∏Ç‡∏≠‡∏á input ‡∏´‡∏£‡∏∑‡∏≠ Locator ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î calendar
 */
async function selectDate(page, yyyymmdd, dateInputSelector) {
  // üîπ ‡πÅ‡∏¢‡∏Å‡∏ß‡∏±‡∏ô ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏õ‡∏µ (‡∏Ñ.‡∏®.)
  const year = parseInt(yyyymmdd.substring(0, 4), 10);
  const month = parseInt(yyyymmdd.substring(4, 6), 10);
  const day = parseInt(yyyymmdd.substring(6, 8), 10);

  // üîπ Map ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  const monthMap = {
    1: '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', 2: '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', 3: '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', 4: '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô',
    5: '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', 6: '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô', 7: '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', 8: '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°',
    9: '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', 10: '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', 11: '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', 12: '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  };

  // üîπ ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏Ñ.‡∏®. ‚Üí ‡∏û‡∏∏‡∏ó‡∏ò
  const targetYearBuddhist = year + 543;
  const targetMonthYear = `${monthMap[month]}, ${targetYearBuddhist}`;

  console.log(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${day} ${monthMap[month]} ${targetYearBuddhist}`);

  // 1Ô∏è‚É£ ‡πÄ‡∏õ‡∏¥‡∏î calendar
  if (typeof dateInputSelector === 'string') {
    await page.locator(dateInputSelector).click();
  } else {
    await dateInputSelector.click();
  }

  // 2Ô∏è‚É£ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ calendar ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏à‡∏£‡∏¥‡∏á display:block)
  let currentMonthYear = (
    await page.locator('.calendar[style*="display: block"] .title').first().textContent()
  ).trim();

  while (currentMonthYear !== targetMonthYear) {
    const [currentMonth, currentYear] = currentMonthYear.split(',').map(s => s.trim());
    const currentMonthNum = parseInt(Object.keys(monthMap).find(k => monthMap[k] === currentMonth), 10);
    const currentYearNum = parseInt(currentYear, 10); // ‡∏õ‡∏µ‡∏û‡∏∏‡∏ó‡∏ò

    const currentValue = currentYearNum * 12 + currentMonthNum;
    const targetValue = targetYearBuddhist * 12 + month;

    if (currentValue > targetValue) {
      // ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö ‚Äπ
      await page.locator('.calendar[style*="display: block"] td.button.nav >> text=‚Äπ').click();
    } else {
      // ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‚Ä∫
      await page.locator('.calendar[style*="display: block"] td.button.nav >> text=‚Ä∫').click();
    }

    currentMonthYear = (
      await page.locator('.calendar[style*="display: block"] .title').first().textContent()
    ).trim();
  }

  // 3Ô∏è‚É£ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô (exact match ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  await page
    .locator('.calendar[style*="display: block"] td.day.null')
    .filter({ hasText: new RegExp(`^${day}$`) })
    .first()
    .click();
}

module.exports = { selectDate };
