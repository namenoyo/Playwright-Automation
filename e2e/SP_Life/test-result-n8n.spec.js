const { test, expect, request } = require('@playwright/test');
const { sendresultn8nbot } = require('../../utils/common');

test('n8n send parameter to webhook', async ({ page }) => {
    test.setTimeout(3000000)

    const resulttest = 'pass'
    const testcase = '‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô ‡∏Ç‡∏≠‡∏á ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ SP Life';
    const plangroup = 'MRTA';
    const insuresum = 50000;
    const counttotalcase = 2110;
    const countpass = 1800;
    const countfail = 200;

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
    const options = {
        timeZone: 'Asia/Bangkok',
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false
    };

    const startdate = new Date();
    // ‡πÉ‡∏ä‡πâ Intl.DateTimeFormat ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const startformatter = new Intl.DateTimeFormat('th-TH', options);
    const startparts = startformatter.formatToParts(startdate);
    // ‡πÅ‡∏õ‡∏•‡∏á parts ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏ö‡∏ö dd/mm/yyyy hh:mm:ss
    const startdateformat = `${startparts.find(p => p.type === 'day')?.value}/${startparts.find(p => p.type === 'month')?.value}/${startparts.find(p => p.type === 'year')?.value} ${startparts.find(p => p.type === 'hour')?.value}:${startparts.find(p => p.type === 'minute')?.value}:${startparts.find(p => p.type === 'second')?.value}`;

    const finishdate = new Date();
    // ‡πÉ‡∏ä‡πâ Intl.DateTimeFormat ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const finishformatter = new Intl.DateTimeFormat('th-TH', options);
    const finishparts = finishformatter.formatToParts(finishdate);

    // ‡πÅ‡∏õ‡∏•‡∏á parts ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏ö‡∏ö dd/mm/yyyy hh:mm:ss
    const finishdateformat = `${finishparts.find(p => p.type === 'day')?.value}/${finishparts.find(p => p.type === 'month')?.value}/${finishparts.find(p => p.type === 'year')?.value} ${finishparts.find(p => p.type === 'hour')?.value}:${finishparts.find(p => p.type === 'minute')?.value}:${finishparts.find(p => p.type === 'second')?.value}`;

    await sendresultn8nbot(resulttest, testcase, plangroup, insuresum, counttotalcase, countpass, countfail, startdateformat, finishdateformat);


    const dataList = [
        { name: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏π‡πà‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå 1 ‡∏û‡∏•‡∏±‡∏™' },
        { name: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏π‡πà‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå 2 ‡∏û‡∏•‡∏±‡∏™' },
        { name: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏π‡πà‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå 3 ‡∏û‡∏•‡∏±‡∏™' }
    ];

    for (let i = 0; i < dataList.length; i++) {
        let retryCount = 0;
        const maxRetries = 3;
        const timeout = 10000;

        while (retryCount < maxRetries) {
            try {
                // console.log(`‚ñ∂Ô∏è ‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà ${i + 1} (${dataList[i].name})`);

                console.log(`‚ñ∂Ô∏è  ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö row_unique ${i + 1}`);

                // ‚è±Ô∏è ‡∏Å‡∏≥‡∏´‡∏ô‡∏î timeout ‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö (‡πÄ‡∏ä‡πà‡∏ô 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                await Promise.race([

                    (async () => {
                        await page.goto('https://sp-life-sit.ochi.link/thaisamut/pub/splife/login.html', {
                                waitUntil: 'networkidle'
                            });

                            await page.locator('input[type="text"]').fill('5300385');
                            await page.locator('input[type="password"]').fill('Ocean@55');
                            await page.locator('span', { hasText: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' }).click();
                            await page.waitForNavigation({ waitUntil: 'networkidle' });
                            await page.locator('button', { hasText: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤' }).nth(1).click();
                        if (retryCount <= 2) {
                            await page.locator('span', { hasText: '‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö' }).click();
                            await page.locator('h6', { hasText: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏π‡πà‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå 1 ‡∏û‡∏•‡∏±‡∏™' }).click();
                        } else {
                            await page.locator('h6', { hasText: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏π‡πà‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå 1 ‡∏û‡∏•‡∏±‡∏™' }).click();
                        }

                    })(),

                    new Promise((_, reject) =>
                        setTimeout(() => reject(new Error('‚è∞ Loop timeout (10s)')), timeout)
                    )
                ]);

                // await page.goto('https://sp-life-sit.ochi.link/thaisamut/pub/splife/login.html', {
                //     waitUntil: 'networkidle'
                // });

                // await page.locator('input[type="text"]').fill('5300385');
                // await page.locator('input[type="password"]').fill('Ocean@55');
                // await page.locator('span', { hasText: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' }).click();
                // await page.waitForNavigation({ waitUntil: 'networkidle' });
                // await page.locator('button', { hasText: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤' }).nth(1).click();
                // await page.locator('span', { hasText: '‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö' }).click();
                // await page.locator('h6', { hasText: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏π‡πà‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå 1 ‡∏û‡∏•‡∏±‡∏™' }).click();

                break; // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å while retry

            } catch (err) {
                retryCount++;
                // console.warn(`‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà ${i + 1} ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${retryCount}: ${err.message}`);

                console.warn(`‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö row_unique ${i + 1} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${retryCount} : ${err.message}`);

                if (retryCount >= maxRetries) {
                    // console.error(`üõë ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà ${i + 1}, ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡∏∏‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ`);
                    console.error(`üõë ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô row_unique ${i + 1}, ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡∏∏‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ`);
                    await page.screenshot({ path: `screenshots/SPLife/row_unique-${i + 1}.png`, fullPage: true });
                } else {
                    // console.log(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà ${i + 1} ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${retryCount + 1}`);

                    console.log(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö row_unique ${i + 1} ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${retryCount + 1}`);
                    // await this.page.reload(); // ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥ clean up
                }
            }
        }
    }
})